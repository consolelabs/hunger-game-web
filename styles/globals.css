@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --border-size: 4px;
  --border-corner-size: 16px;
  --border-path-tlbr: var(--border-corner-size) 0, 100% 0,
    100% calc(100% - var(--border-corner-size)),
    calc(100% - var(--border-corner-size)) 100%, 0 100%,
    0 calc(100% - var(--border-size)),
    calc(100% - var(--border-corner-size)) calc(100% - var(--border-size)),
    calc(100% - var(--border-size)) calc(100% - var(--border-corner-size)),
    calc(100% - var(--border-size)) var(--border-size),
    var(--border-corner-size) var(--border-size),
    var(--border-size) var(--border-corner-size),
    var(--border-size) calc(100% - var(--border-size)),
    0 calc(100% - var(--border-size)), 0 var(--border-corner-size);
  --border-path-tl: var(--border-corner-size) 0, 100% 0, 100% 100%, 0 100%,
    0 calc(100% - var(--border-size)),
    calc(100% - var(--border-size)) calc(100% - var(--border-size)),
    calc(100% - var(--border-size)) calc(100% - var(--border-size)),
    calc(100% - var(--border-size)) var(--border-size),
    var(--border-corner-size) var(--border-size),
    var(--border-size) var(--border-corner-size),
    var(--border-size) calc(100% - var(--border-size)),
    0 calc(100% - var(--border-size)), 0 var(--border-corner-size);
  --border-path-br: 0 0, 100% 0, 100% calc(100% - var(--border-corner-size)),
    calc(100% - var(--border-corner-size)) 100%, 0 100%,
    0 calc(100% - var(--border-size)),
    calc(100% - var(--border-corner-size)) calc(100% - var(--border-size)),
    calc(100% - var(--border-size)) calc(100% - var(--border-corner-size)),
    calc(100% - var(--border-size)) var(--border-size),
    var(--border-size) var(--border-size),
    var(--border-size) var(--border-corner-size),
    var(--border-size) calc(100% - var(--border-size)),
    0 calc(100% - var(--border-size)), 0 0;
  --container-path-tlbr: var(--border-corner-size) 0, 100% 0,
    100% calc(100% - var(--border-corner-size)),
    calc(100% - var(--border-corner-size)) 100%, 0 100%,
    0 var(--border-corner-size);
  --container-path-tl: var(--border-corner-size) 0, 100% 0, 100% 100%, 0 100%,
    0 var(--border-corner-size);
  --container-path-br: 0 0, 100% 0, 100% calc(100% - var(--border-corner-size)),
    calc(100% - var(--border-corner-size)) 100%, 0 100%,
    0 var(--border-corner-size);
}

html,
body,
#__next {
  width: 100%;
  height: 100%;
  padding: 0;
  margin: 0;
  font-family: "Chakra Petch", sans-serif;
  font-size: 16px;
}

* {
  box-sizing: border-box;
  position: relative;
}

/* Button */

.button {
  @apply px-4 py-2 font-medium uppercase font-black transition-all;
  font-family: "Industry";
  box-shadow: 0px 2px 2px var(--button-shadow-color);
}

.button:active {
  box-shadow: 0 0 0 var(--button-shadow-color),
    inset 0 2px 2px var(--button-shadow-color);
  transform: translate(0, 2px);
}

.button.primary {
  @apply text-white bg-red-500;
  --button-shadow-color: #7f1d1d;
}

.button.secondary {
  color: white;
  background-color: #61727b;
  --button-shadow-color: #164e63;
}

/* Input */

/* Chrome, Safari, Edge, Opera */
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

/* Firefox */
input[type="number"] {
  -moz-appearance: textfield;
}

input[type="text"] {
  @apply bg-teal-900/30 border-2 border-cyan-500 px-4 py-2 outline-none focus:border-white;
}

@keyframes background-sprites {
  to {
    background-position: -16rem;
  }
}

/* Playground */
@keyframes flicker {
  0% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
  100% {
    opacity: 1;
  }
}

.playground .col.next::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgb(173, 255, 47, 0.5);
  animation: flicker 1.5s infinite;
}

/* Player */
@keyframes player-idle-sprites {
  from {
    background-position: 0;
  }
  to {
    background-position: -6rem;
  }
}

@keyframes player-hit-sprites {
  from {
    background-position: -19.5rem;
  }
  to {
    background-position: -24rem;
  }
}

.idle > img {
  animation: player-idle-sprites 0.5s steps(4) infinite;
}

.hit > img {
  animation: player-hit-sprites 0.5s steps(3) infinite;
}

.face-left > img {
  transform: scaleX(-1);
}

.accept-button::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  transform: translateY(50%);
  /* border-bottom: 10px solid red; */
  border-radius: 9999px;
  height: 1px;
  width: 100%;
}

/* Card */

.card {
  @apply relative;
}

.card::before {
  @apply absolute w-full h-full top-0 left-0;
  content: "";
  background-image: linear-gradient(to bottom right, #5b21b6, #06b6d4);
}

.card-tl {
  clip-path: polygon(var(--container-path-tl));
}

.card-tl::before {
  clip-path: polygon(var(--border-path-tl));
}

.card-tlbr {
  clip-path: polygon(var(--container-path-tlbr));
}

.card-tlbr::before {
  clip-path: polygon(var(--border-path-tlbr));
}

.card-br {
  clip-path: polygon(var(--container-path-br));
}

.card-br::before {
  clip-path: polygon(var(--border-path-br));
}
